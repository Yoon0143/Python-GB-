#Практическое задание. Урок №1
печать ( 'Задание №1' )
'''
Реализовать вывод информации о промежутке времени в зависимости от его продолжительности в секундах:
до минуты: <s> сек;
до часа: <m> мин <s> сек;
до суток: <ч> час <м> мин <с> сек;
* в остальных случаях: <д> дн <ч> час <м> мин <с> сек.
'''

# 1 минута
одна_минута  =  60
# 1 час
один_час  =  3600
# 1 день
один_день  =  86400
# 1 неделя
одна_неделя  =  604800
# 1 месяц (30.44 дня)
один_месяц  =  2629743
# 1 год (365,24 дня)
один_год  =  31556926

#Пользователь вводит продолжительность в секундах:
duration  =  int ( input ( 'Укажите продолжительность в секундах: ' ))

#вывод информации до минуты:
если  продолжительность < one_minute :
    print ( '{} сек' . формат ( продолжительность ))
#вывод информации до часа:
elif  one_minute  <=  продолжительность  и  one_hour  >  продолжительность :
    my_minute = продолжительность // одна_минута
    моя_секунда = продолжительность % одна_минута
    print ( '{} мин {} сек' . format ( моя_минута , моя_секунда ));
#вывод информации до суток:
elif  продолжительность  >=  one_hour  и  продолжительность  <  one_day :
    my_hour = продолжительность  //  один_час
    продолжительность = продолжительность  %  один_час
    my_minute  =  продолжительность  //  одна_минута
    моя_секунда  =  продолжительность  %  одна_минута
    print ( '{} час {} мин {} сек' . format ( my_hour , my_minute , my_second ));
#вывод информации до недели:
elif  продолжительность  >=  one_day  и  продолжительность  <  one_week :
    my_day  =  продолжительность  //  one_day
    продолжительность = продолжительность  %  one_day
    my_hour  =  продолжительность  //  один_час
    продолжительность  =  продолжительность  %  один_час
    my_minute  =  продолжительность  //  одна_минута
    моя_секунда  =  продолжительность  %  одна_минута
    print ( '{} дн {} час {} мин {} сек' . format ( мой_день , мой_час , моя_минута , моя_секунда ));
#вывод информации до месяца:
elif  продолжительность  >=  один_месяц  и  продолжительность  <  один_год :
    my_week  =  продолжительность // одна_неделя
    продолжительность = продолжительность % одна_неделя
    my_day  =  продолжительность  //  one_day
    продолжительность  =  продолжительность  %  one_day
    my_hour  =  продолжительность  //  один_час
    продолжительность  =  продолжительность  %  один_час
    my_minute  =  продолжительность  //  одна_минута
    моя_секунда  =  продолжительность  %  одна_минута
    print ( '{} нед {} дн {} час {} мин {} сек' . format ( моя_неделя , мой_день , мой_час , моя_минута , моя_секунда ));
#вывод информации до года:
elif  продолжительность  >=  one_year :
    my_year = продолжительность // one_year
    продолжительность  =  продолжительность  %  one_year
    my_week  =  продолжительность // одна_неделя
    продолжительность = продолжительность % одна_неделя
    my_day  =  продолжительность  //  one_day
    продолжительность  =  продолжительность  %  one_day
    my_hour  =  продолжительность  //  один_час
    продолжительность  =  продолжительность  %  один_час
    my_minute  =  продолжительность  //  одна_минута
    моя_секунда  =  продолжительность  %  одна_минута
    print ( '{} год {} нед {} дн {} час {} мин {} сек' . format ( мой_год , моя_неделя , мой_день , мой_час , моя_минута , моя_секунда ));


печать ( 'Задание №2' )
'''
Создать список, состоящий из кубов несчетных чисел от 1 до 1000 (куб X - третья степень числа X):
1. Вычислите количество тех чисел из этого списка, количество цифр, встречающихся нацело на 7. 
Например, число «19 ^ 3 = 6859» будет отображаться в сумме, так как 6 + 8 + 5 + 9 = 28 – показано нацело на 7. 
Внимание: используйте только арифметические операции!
2. К каждому элементу списка добавляется 17 и точно вычисляется количество тех чисел из этого списка, количество цифр, которые встречаются нацело на 7. 
* Решить клавиши под пунктом b, не допуская появления нового списка.
'''
# 1. Вычислите количество тех чисел из этого списка, число которых встречается нацело на 7. Например, число «19 ^ 3 = 6859» будем учитывать в сумме, так как 6 + 8 + 5 + 9 = 28 – число попаданий нацело на 7. Внимание: используются только арифметические операции!
#создать список кубов несчетных чисел от 1 до 1000

кубы  = [ x ** 3  для  x  в  диапазоне ( 100 ) если   x % 2  !=  0 ]
print ( 'Cоздан список кубов нечётных чисел {}' . format ( cubes ))
my_numbers_sum  =  0
my_numbers_sum_list = []

# итерация по списку
для  i  в  диапазоне ( len ( кубов )):
    #print('---вывести кубы[i]', кубы[i])
    my_str  =  str ( кубы [ i ])
    мой_список  =  список ( my_str )
    #print('распечатать мой_список', мой_список)
    для  i  в  диапазоне ( len ( my_list )):
        мой_список [ я ] =  int ( мой_список [ я ])
    # Вычислить количество чисел (вар.1)
    '''
    my_numbers_sum = сумма (мой_список)
    печать (my_numbers_sum)
    '''
    # Вычислить количество чисел (вар.2)
    для  i  в  диапазоне ( len ( my_list )):
        my_numbers_sum  =  my_numbers_sum  +  my_list [ i ]

    #Условие,сумма событий раскрывается нацело на 7
    если  my_numbers_sum  %  7  ==  0 :
        print ( 'Cумму чисел, делящихся на 7 :' , my_numbers_sum )
        мой_числа_сумма_список . добавить ( my_numbers_sum )

print ( 'Список чисел, делящихся на 7 (задание 1) : ' , my_numbers_sum_list )

#2.

кубы  = [( x ** 3 ) + 17  для  x  в  диапазоне ( 100 ) если  x % 2  ==  0 ]
print ( 'Cоздан список кубов нечётных чисел {}' . format ( cubes ))
my_numbers_sum  =  0
my_numbers_sum_list_even_numbers  = []

# итерация по списку
для  i  в  диапазоне ( len ( кубов )):
    #print('---вывести кубы[i]', кубы[i])
    my_str  =  str ( кубы [ i ])
    мой_список  =  список ( my_str )
    #print('распечатать мой_список', мой_список)
    для  i  в  диапазоне ( len ( my_list )):
        мой_список [ я ] =  int ( мой_список [ я ])
    # Вычислить количество чисел (вар.1)
    '''
    my_numbers_sum = сумма (мой_список)
    печать (my_numbers_sum)
    '''
    # Вычислить количество чисел (вар.2)
    для  i  в  диапазоне ( len ( my_list )):
        my_numbers_sum  =  my_numbers_sum  +  my_list [ i ]

    #Условие, количество чисел передается нацело на 7
    если  my_numbers_sum  %  7  ==  0 :
        print ( 'Cумму чисел, делящихся на 7 :' , my_numbers_sum )
        my_numbers_sum_list_even_numbers . добавить ( my_numbers_sum )

print ( 'Список чисел, делящихся на 7 (задание 2) : ' , my_numbers_sum_list_even_numbers )

#* Решить зубы под пунктом b, не вызывая особого внимания.


печать ( 'Задание №3' )

'''
Склонение слова
Реализовать склонение слова «процент» во фразе «N процентов». 
Вывести эту фразу на экран отдельными строками для каждого из чисел в интервале от 1 до 100:
1 процент
2 процента
3 процента
4 процента
5 процентов
6 процентов
...
100 процентов
'''

для  я  в  диапазоне ( 100 ):
    new_str = строка ( я + 1 )
    новый_список  =  список ( новая_строка )
    если  int ( new_list [ - 1 ]) == 1  и  i + 1 != 11 :
        print ( '{} процентов' . формат ( i  +  1 ))
    elif  int ( new_list [ - 1 ]) > 1  и  int ( new_list [ - 1 ]) <=  4 :
        если   я + 1 >  10  и  я + 1 <=  14 :
            печать ( '{} процентов' . формат ( я  +  1 ))
        еще :
            печать ( '{} процентов' . формат ( я  +  1 ))
    еще :
        печать ( '{} процентов' . формат ( я  +  1 ))
